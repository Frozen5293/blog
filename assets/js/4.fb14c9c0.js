(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{282:function(s,a,n){},283:function(s,a,n){},326:function(s,a,n){"use strict";n(282)},327:function(s,a,n){"use strict";n(283)},464:function(s,a,n){"use strict";n.r(a);n(326),n(327);var t=n(8),e=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("在CMake中，你可以通过使用目标属性 INTERFACE 来确保每个文件只被链接一次。\n这可以通过 INTERFACE_LINK_LIBRARIES 属性来实现。")]),s._v(" "),a("p",[s._v("以下是一个示例的CMakeLists.txt文件，展示了如何使用C++和CMake来确保每个文件只被链接一次：")]),s._v(" "),a("div",{staticClass:"language-cmake line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cmake"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# cmake")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("cmake_minimum_required")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("VERSION")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("project")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("MyProject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加源代码")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add_library")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("MyLibrary "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("INTERFACE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加源文件")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("target_sources")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("MyLibrary "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("INTERFACE")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("${")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("CMAKE_CURRENT_SOURCE_DIR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("/file1.cpp\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("${")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("CMAKE_CURRENT_SOURCE_DIR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("/file2.cpp\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加更多源文件...")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加头文件路径")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("target_include_directories")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("MyLibrary "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("INTERFACE")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("${")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("CMAKE_CURRENT_SOURCE_DIR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("/include\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加更多头文件路径...")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加链接的库")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("target_link_libraries")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("MyLibrary "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("INTERFACE")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("${")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("CMAKE_CURRENT_SOURCE_DIR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("/lib/library1.lib\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("${")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("CMAKE_CURRENT_SOURCE_DIR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("/lib/library2.lib\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加更多链接的库...")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加其他编译选项")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("target_compile_options")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("MyLibrary "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("INTERFACE")]),s._v("\n    -Wall\n    -O3\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加更多编译选项...")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建可执行文件")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add_executable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("MyExecutable main.cpp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 链接库")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("target_link_libraries")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("MyExecutable "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("PRIVATE")]),s._v(" MyLibrary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在上述示例中，我们首先使用 add_library 命令创建一个名为 MyLibrary 的接口库。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#然后，我们使用 target_sources 命令添加源文件，使用 target_include_directories 命令添加头文件路径，")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#使用 target_link_libraries 命令添加链接的库，使用 target_compile_options 命令添加其他编译选项。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这些属性都使用了 INTERFACE 修饰符，以确保只在链接时起作用。")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 最后，我们使用 add_executable 命令创建一个可执行文件，并使用 target_link_libraries 命令将 MyLibrary ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 链接到可执行文件中。")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 通过这种方式，每个源文件和库只会被链接一次，避免了重复链接的问题。")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 请注意，这只是一个示例，你可以根据你的项目需求进行适当的修改。确保在项目中的所有CMakeLists.txt文件中")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 都遵循这个约定，以确保每个文件只被链接一次。")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br")])]),a("p",[s._v("使用CMake，你可以根据不同的平台或条件，为不同的平台使用不同的代码进行编译。下面是一种基本的方法：")]),s._v(" "),a("p",[s._v("在你的项目中，按照平台或条件将源代码文件分组。例如，你可以在项目目录下创建不同的文件夹，用于存放特定平台的代码。假设你有两个平台：Windows和Linux，你可以创建以下文件结构：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("project/\n  |- src/\n     |- common/        # 存放通用的代码\n     |- windows/       # 存放 Windows 平台特定的代码\n     |- linux/         # 存放 Linux 平台特定的代码\n  |- CMakeLists.txt\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("在项目的根目录中创建一个 CMakeLists.txt 文件，用于定义项目的构建规则和条件。该文件描述了如何编译源代码并生成目标可执行文件。下面是一个示例 CMakeLists.txt 文件：")]),s._v(" "),a("div",{staticClass:"language-cmake line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cmake"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("cmake_minimum_required")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("VERSION")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("project")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("MyProject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加源代码")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add_subdirectory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("src"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义可执行文件")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add_executable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("MyExecutable main.cpp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 根据平台或条件，设置特定的源代码文件")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("WIN32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("target_sources")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("MyExecutable "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("PRIVATE")]),s._v(" src/windows/*.cpp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("elseif")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("UNIX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("target_sources")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("MyExecutable "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("PRIVATE")]),s._v(" src/linux/*.cpp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("endif")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("在上述示例中，我们首先使用 add_subdirectory 命令添加源代码目录，该命令会进入 src 目录进行构建。然后，使用 add_executable 命令定义目标可执行文件，并使用 target_sources 命令根据平台或条件设置特定的源代码文件。")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("接下来，你可以使用 CMake 来生成构建系统和编译你的项目。打开命令行终端，进入项目目录，并执行以下命令：\n")])])]),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" build\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" build\ncmake "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上述命令会在 build 目录中生成相应的构建系统文件（如Makefile或Visual Studio解决方案），并根据你的 CMakeLists.txt 文件配置编译选项。")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("最后，使用适合你的构建系统（如 make、ninja、Visual Studio等）执行构建命令，以编译和生成可执行文件。\n")])])]),a("p",[s._v("这种方法允许你根据不同的平台或条件为不同的代码提供不同的编译规则。在实际的项目中，你可以根据具体的需求和平台添加更多的条件和源代码文件。")]),s._v(" "),a("p",[s._v("请注意，CMake也支持其他更高级的条件处理方法，如使用 if-else、foreach 等语句，以及使用变量来进行更灵活的控制。详细了解 CMake 的文档和语法，将有助于你更好地处理不同平台和代码的编译。")])])}),[],!1,null,null,null);a.default=e.exports}}]);